<?php
class VulnerabilityDAO {
    
    public static function insertVulnerability (Vulnerability $vuln){
        $sql = new Sql();
        $sql->query("insert into vulnerability ( id, name, severity, host_id, scan_id, plugin_id,scanner_id ) 
                                        values (:ID,:NAME,:SEVERITY,:HOST_ID,:SCAN_ID,:PLUGIN_ID,:SCANNER_ID ) ",array(
                                               ":ID"=>$vuln->getId(),
                                               ":NAME"=>$vuln->getName(),
                                               ":SEVERITY"=>$vuln->getSeverity(),
                                               ":HOST_ID"=>$vuln->getHost_id(),
                                               ":SCAN_ID"=>$vuln->getScan_id(),
                                               ":PLUGIN_ID"=>$vuln->getPlugin_id(),
                                               ":SCANNER_ID"=>$vuln->getScanner_id()   
        ));
    }
    
    public static function getVulnerabiliiesFromHostname ($hostname){
        $sql = new Sql();
        $result=$sql->query("call sp_getScansFromHost ( :HOSTNAME )",array(
                                               ":HOSTNAME"=>$hostname));
        $returnValue =array("modification"=>"","critical"=>"","high"=>"","medium"=>"","low"=>"","info"=>"");
        
        foreach ($result as $row){
            $returnValue["modification"] = "'".gmdate("d-m-Y",(int)$row['modification'])."',".$returnValue["modification"];
            $returnValue["critical"] = $row['critical'].",".$returnValue["critical"];
            $returnValue["high"]     = $row['high'].",".$returnValue["high"];
            $returnValue["medium"]   = $row['medium'].",".$returnValue["medium"];
            $returnValue["low"]      = $row['low'].",".$returnValue["low"];
            $returnValue["info"]     = $row['info'].",".$returnValue["info"];
        }
        return $returnValue;
    }
    public static function getAllVulnerabilitiesFromScan ($scan_id,$scanner_id,$scan_name){
        $sql = new Sql();
        $result=$sql->query("call getAllVulnsNamesFromScan ( :SCAN_ID , :SCANNER_ID, :NAME)",array(
            ":SCAN_ID"=>$scan_id,
            ":SCANNER_ID"=>$scanner_id,
            ":NAME"=>$scan_name
            
        ));
        return $result;
    }

    public static function getAllHostsVulnerable ($scan_id,$scanner_id,$name){
        $sql = new Sql();
        $result=$sql->query("call getAllHostsVulnerable ( :SCAN_ID , :SCANNER_ID , :NAME)",array(
            ":SCAN_ID"=>$scan_id,
            ":SCANNER_ID"=>$scanner_id,
            ":NAME"=>$name
        ));
        return $result;
    }
    public static function searchVulnerabilitiesFromName ($vulnName){
        
        $sql = new Sql();
        
        $result=$sql->select("call searchVulnerability( :VULN_NAME );",array(
            ":VULN_NAME"=>$vulnName
        ));
        
        $vulnAndHost = array();
        
        if(isset($result))
        {
            foreach ($result as $value) {
               $vulnAndHost[$value['name']]=array('hosts'=>array(),'severity'=>$value['severity']);
                $hostsVulnerable = $sql->select("select distinct v.name,h.hostname as scanName from vulnerability v inner join hosts h on v.host_id = h.id inner join scans s on s.id=v.scan_id where v.name = :NAME and v.scan_id=h.scan_id order by h.hostname",
                array(":NAME"=>$value['name']));
                foreach ($hostsVulnerable as $ip){
                    array_push($vulnAndHost[$value['name']]['hosts'],$ip['scanName']);
                }
            }
        }
        return $vulnAndHost;
    }
    
    public static function searchVulnerabilitiesFromNameGRAPH ($vulnName){
        
        $sql = new Sql();
        
        $result=$sql->select("select distinct v.name, count(distinct h.hostname) as total,v.severity from vulnerability v inner join hosts h on v.host_id = h.id inner join scans s on s.id=v.scan_id where v.name = :NAME  and v.scan_id=h.scan_id group by v.name order by h.hostname;",array(
            ":NAME"=>$vulnName
        ));
        
      
        return $result;
    }
    public static function deleteVuln4Update ($scan){
        
        $sql = new Sql();
        $sql->query("delete from vulnerability where scan_id = :ID and scanner_id = :SCANNER_ID;",array(
            ":ID"=>$scan->getId(),
            ":SCANNER_ID"=>$scan->getScanner_id()
        ));
    }
    
    
    
    
    
    
    
    
    
    
    
    
}

?>